#!/usr/bin/env python
from __future__ import print_function

# All vars are optional:
# $NODEJS, $NPM, $SJS_ROOT
# $BROWSERS (e.g PhantomJS,Firefox - used for karma)
# $r -- runner: comma-separated list of karma,nodejs
# $t -- test suite:  unit|integration

import os,sys,subprocess,time,signal
def bool_env(name, default='false'):
	return os.environ.get(name, default).lower() == 'true'

def log(s):
	print(s)
	sys.stdout.flush()

def err(s):
	print(s, file=sys.stderr)
	sys.stderr.flush()

def log_cmd(cmd):
	err("Running %r" % (cmd,))

CI = bool_env('CI')
TRAVIS = bool_env('TRAVIS')
WINDOWS = sys.platform.startswith('win')

def _annotate_popen_args(k):
	if WINDOWS:
		k['creationflags']=subprocess.CREATE_NEW_PROCESS_GROUP
	return k

def Popen(cmd, **k):
	log_cmd(cmd)
	return subprocess.Popen(cmd, **_annotate_popen_args(k))

def kill(proc):
	if WINDOWS:
		proc.send_signal(signal.CTRL_BREAK_EVENT)
		# NOTE: we don't wait() on windows, since that can hang forever.
		# Just hope for the best...
	else:
		proc.terminate()
		proc.wait();

def check_call(cmd, **k):
	log_cmd(cmd)
	return subprocess.check_call(cmd, **_annotate_popen_args(k))


browsers = os.environ.get('BROWSERS', 'PhantomJS').strip().split(',')
suite = os.environ.get('t', None)
args = sys.argv[1:]
if suite is not None:
  args.insert(0, suite)

sjs_root = os.environ.get('SJS_ROOT', None)
if sjs_root is not None:
	os.chdir(sjs_root)
else: sjs_root = os.getcwd()

default_runners = 'node,karma'

if CI:
	# use presence of BROWSERS to imply node/karma runner
	default_runners = 'karma' if 'BROWSERS' in os.environ else 'node'

runners = os.environ.get('r', default_runners).lower().split(',')

if TRAVIS and 'karma' in runners:
	if browsers != ['PhantomJS']:
		os.environ['DISPLAY'] = ':99'
		check_call(["sh", "-e", "/etc/init.d/xvfb", "start"])
		time.sleep(3)

node = os.environ.get('NODEJS', 'node')
npm = os.environ.get('NPM', 'npm')

testmod = 'test/run.html'


conductance = None
if suite and 'integration' in suite:
	null = open(os.devnull)
	# make sure npm-installed conductance can be found on $PATH
	os.environ['PATH'] = os.pathsep.join([
		os.environ['PATH'],

		# npm-generated binaries don't even work on windows, so don't bother
		os.path.abspath('node_modules/conductance') if WINDOWS else os.path.abspath('node_modules/.bin'),
	])

	conductance_installed = False
	conductance_exe = None

	def find_conductance():
		# ext = '.cmd' if WINDOWS else ''
		for p in os.environ['PATH'].split(os.pathsep):
			candidate = os.path.join(p, 'conductance')
			if os.path.exists(candidate):
				err("Found conductance in %s" % candidate)
				if WINDOWS:
					# NOTE: we don't use conductance.cmd because that
					# doesn't get killed properly.
					return [node, candidate]
				return [candidate]
		else:
			return None

	conductance_args = find_conductance()
	if conductance_args is None:
		check_call([npm, 'install', '--production', 'conductance'])
		conductance_args = find_conductance()
		if conductance_args is None:
			err("Could not find conductance.")
			sys.exit(1)

	conductance = Popen(conductance_args + ['serve', 'test/config.mho'], stdout=null)
	time.sleep(1)
	assert conductance.poll() is None, "conductance process exited with status %s" % conductance.poll()
	err("conductance launched (pid %s)" % conductance.pid)

try:
	if TRAVIS: # should probably be CI, but appveyor fails to build some stuff properly atm
		# fail if there are outstanding VCS changes
		check_call([node, 'sjs', 'src/build/buildscript.sjs'])
		check_call([node, 'sjs', 'tools/vcs-changes.sjs'])

	for runner in runners:
		if runner == 'node':
			check_call([node, 'sjs', testmod] + args)
		elif runner == 'karma':
			if not os.path.exists('node_modules/karma-sjs-adapter'):
				check_call([npm, 'install'])

			# XXX do the same hacks as test/karma, because we can't
			# rely on bash being installed (windows)
			np = os.environ.get('NODE_PATH')
			np = np.split(os.pathsep) if np else []
			np.append(os.path.dirname(sjs_root))
			os.environ['NODE_PATH'] = os.pathsep.join(np)

			check_call([
				node,
				'node_modules/karma-sjs-adapter/karma-sjs',
				# 'test/karma',
				'start',
				'tools/karma/conf.js',
				'--single-run',
				'--browsers=' + ','.join(browsers),
				'--', testmod] + args)
				
		else:
			raise AssertionError("Unknown runner: %s" % (runner,))

except subprocess.CalledProcessError as e:
	err("Error: " + str(e))
	sys.exit(1)
finally:
	if conductance is not None:
		err("Shutting down conductance server (pid %s)..." % conductance.pid)
		kill(conductance)
		err("Server shutdown complete.")

